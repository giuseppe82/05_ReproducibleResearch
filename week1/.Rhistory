apply(iris[,1], Species ==virginica, 2, mean)
apply(iris, Species == virginica, 2, mean)
apply(iris[,1], 2, mean)
apply(iris[1], 2, mean)
apply(iris[1], 2, mean, Species == virginica)
apply(iris[,1], 2, mean, Species == virginica)
apply(iris[,1, Species == virginica], 2, mean)
library(datasets)
data("mtcars")
data
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
sapply(mtcars, cyl, mean)
sapply(mtcars$cyl, mean)
lapply(mtcars$mpg, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl==6, mean)
tapply(mtcars$mpg, mtcars$cyl==6, mean, simplify = FALSE)
tapply(mtcars$hp, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl==6, mean)
tapply(mtcars$hp, mtcars$cyl==8, mean)
tapply(mtcars$hp, mtcars$cyl==8, mean) - tapply(mtcars$hp, mtcars$cyl==6, mean)
abs(tapply(mtcars$hp, mtcars$cyl==8, mean) - tapply(mtcars$hp, mtcars$cyl==6, mean))
hp6 <- tapply(mtcars$hp, mtcars$cyl==6, mean)
hp6
hp8 <- tapply(mtcars$hp, mtcars$cyl==8, mean)
abs(hp6 -hp8)
debug(ls)
ls
library(datasets)
data(iris)
colMeans(iris["Sepal.Length"],na.rm=TRUE )
colMeans(iris["Sepal.Length"],Species == virginica, na.rm=TRUE )
colMeans(iris["Sepal.Length", "Species" == virginica,], na.rm=TRUE )
A<- subset(iris, Species == virginica)
colMeans(iris["Sepal.Length", "Species == virginica",], na.rm=TRUE )
colMeans(iris["Sepal.Length", "Species" == "virginica",], na.rm=TRUE )
A<- subset(iris, Species == "virginica)
a
a
cc
q
c =
vczv
asdv
aswpkefsdav
`
a
clear
x
dffdfssdaf
library(datasets)
data(iris)
A<-subset(iris, Species == "virginica")
A
colMeans(A, na.rm = TRUE)
colMeans(A[,1:4], na.rm = TRUE)
colMeans(iris[,1:4], na.rm = TRUE)
apply(iris[,1:4],2,mean)
rowMean(iris[,1:4])
rowMeans(iris[,1:4])
apply(iris[,1:4],1,mean)
apply(iris,2,mean)
mean(iris$Sepal.Length [iris$Species=="virginica"],na.rm=TRUE)
A<-subset(iris$Species=="virginica")
A<-subset([iris$Species=="virginica"])
A<-subset(iris$Species)
library(dataser)
library(datasets)
data(mtcars)
mtcars
tapply(mtcars$mpg, mtcars$cyl, mean)
lapply(mtcars, mean)
hp4 <- tapply(mtcars$mpg, mtcars$cyl==4, mean)
hp4
tapply(mtcars$mpg, mtcars$cyl, mean)
hp4 <- tapply(mtcars$hp, mtcars$cyl==4, mean)
hp4
tapply(mtcars$hp, mtcars$cyl==4, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
hp8 <- tapply(mtcars$hp, mtcars$cyl==8, mean)
hp8
res <- abs(hp8 - hp4)
res
209.21429 - 82.63636
debug(ls)
ls
ls
n
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
download.file(https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv)
urlfile <- https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv
urlfile <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(urlfile, method = "curl")
setwd("/Users/joedibernardo/Projects/DATASCIENCE/GettingandCleaningData/data")
library(xlsx)
library("xlsx")
read.xlsx
library(XML)
fileUrl <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Frestaurants.xml"
doc <- xmlTreeParse(fileUrl, useInternalNodes = TRUE)
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
exit()
quit()
title: "CodeBook.md"
title: "CodeBook.md"
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
installed.packages("ggplot2")
install.packages("ggplot2")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
qplot(Wind, Ozone, data = airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + stats_smooth("loess")
library(ggplot2)
qplot(votes, rating, data = movies)
library(ggplot2)
qplot(votes, rating, data = movies)
library(ggplot2)
g <- ggplot(movies, aes(votes, rating))
print(g)
g <- ggplot(movies, aes("votes", y="rating"))
g <- ggplot(movies, aes(x="votes", y="rating"))
setwd(dir = "/Users/joedibernardo/Projects/DATASCIENCE/ReproducibleResearch/week1/")
library(ggplot2)
if(!exists('activityData')){
activityData <- read.csv(file = 'activity.csv', head = TRUE, sep = ",")
}
#str(activityData)
# let's split data into groups, and apply the sum function to data within each subgroup
stepsXday <- tapply(activityData$steps, activityData$date, sum, simplify = FALSE)
#g <- ggplot(data = stepsXday, aes(x = activityData$date))
#g <- g + geom_histogram()
#print(g)
stepsXday
activityData$steps
qplot(stepsXday, xlab = 'cazzi mie', ylab = 'cazzi tuoi', binwidth = 500)
qplot(data = stepsXday, xlab = 'cazzi mie', ylab = 'cazzi tuoi', binwidth = 500)
hist(stepsXday)
stepsXday <- tapply(activityData$steps, activityData$date, sum)
#g <- ggplot(data = stepsXday, aes(x = activityData$date))
#g <- g + geom_histogram()
#print(g)
stepsXday
activityData$steps
hist(stepsXday)
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = '# of Steps per Day')
Mean <- mean(stepsXday)
Median <- median(stepsXday)
Mean, Median
Mean
Median
stepsXday <- tapply(activityData$steps, activityData$date, sum, na.rm = TRUE)
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day')
Mean <- mean(stepsXday)
Median <- median(stepsXday)
Mean
Median
StepsXfive <- aggregate(steps ~ interval, activityData, mean, na.rm = TRUE)
StepsXfive
StepsXfive <- aggregate(steps ~ interval, activityData, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
g <- g + xlab("Five minutes interval")
g <- g + ylab(expression('Total number of steps averaged across all days'))
print(g)
g <- ggplot(data = StepsXfive, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
#g <- g + xlab("Five minutes interval")
#g <- g + ylab(expression('Total number of steps averaged across all days'))
print(g)
g <- g + xlab("Five minutes interval")
#g <- g + ylab(expression('Total number of steps averaged across all days'))
print(g)
g <- g + ylab('Total number of steps averaged across all days')
print(g)
StepsXfive
class(StepsXfive)
ddply
library(ddply)
library(plyr)
ddply(StepsXfive, ~interval, function(x){x[which.max(x$steps), ]})
which.max(StepsXfive$steps)
MaxNrofSteps <- which.max(StepsXfive$steps)
TimeMaxSteps <- StepsXfive$interval[MaxNrofSteps]
TimeMaxSteps
NA_tot <- length(which(is.na(activityData[,]) == TRUE))
NA_tot
activityData_fill[is.na(activityData_fill)] <- StepsXfive
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive
activityData_fill
head(activityData_fill)
str(activityData_fill)
str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
library(Hmisc)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
activityDataImputed
str(activityDataImputed)
head(activityDataImputed)
head(activityData_fill)
head(activityData_fill)
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive
str(activityData_fill)
str(activityData)
head(activityData_fill)
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
head(activityData_fill)
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
str(activityData_fill)
str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
head(activityData_fill)
activityData_fill
length(which(is.na(activityData_fill[,]) == T))
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
str(activityData_fill)
#str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
str(activityDataImputed)
head(activityData_fill)
head(StepsXfive$steps)
stepsXday_fill <- tapply(activityData_fill$steps, activityData_fill$date, sum, na.rm = TRUE)
qplot(stepsXday_fill, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day')
Mean_fill <- mean(stepsXday)
Median_fill <- median(stepsXday)
Mean_fill
Median_fill
stepsXday_fill <- tapply(activityData_fill$steps, activityData_fill$date, sum, na.rm = TRUE)
qplot(stepsXday_fill, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day', binwidth = 500)
Mean_fill <- mean(stepsXday)
Median_fill <- median(stepsXday)
Mean_fill
Median_fill
setwd(dir = "/Users/joedibernardo/Projects/DATASCIENCE/ReproducibleResearch/week1/")
library(ggplot2)
if(!exists('activityData')){
activityData <- read.csv(file = 'activity.csv', head = TRUE, sep = ",")
}
#str(activityData)
# let's split data into groups, and apply the sum function to data within each subgroup
# If TRUE (the default), then if FUN always returns a scalar, tapply returns an array
# with the mode of the scalar.
stepsXday <- tapply(activityData$steps, activityData$date, sum, na.rm = TRUE)
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day')
Mean <- mean(stepsXday)
Median <- median(stepsXday)
Mean
Median
StepsXfive <- aggregate(steps ~ interval, activityData, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
StepsXfive
class(StepsXfive)
library(plyr)
library(Hmisc)
ddply(StepsXfive, ~interval, function(x){x[which.max(x$steps), ]})
MaxNrofSteps <- which.max(StepsXfive$steps)
TimeMaxSteps <- StepsXfive$interval[MaxNrofSteps]
TimeMaxSteps
NA_tot <- length(which(is.na(activityData[,]) == TRUE))
NA_tot
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
str(activityData_fill)
#str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
str(activityDataImputed)
head(activityData_fill)
head(StepsXfive$steps)
stepsXday_fill <- tapply(activityData_fill$steps, activityData_fill$date, sum, na.rm = TRUE)
qplot(stepsXday_fill, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day', binwidth = 500)
Mean_fill <- mean(stepsXday)
Median_fill <- median(stepsXday)
Mean_fill
Median_fill
setwd(dir = "/Users/joedibernardo/Projects/DATASCIENCE/ReproducibleResearch/week1/")
library(ggplot2)
if(!exists('activityData')){
activityData <- read.csv(file = 'activity.csv', head = TRUE, sep = ",")
}
#str(activityData)
# let's split data into groups, and apply the sum function to data within each subgroup
# If TRUE (the default), then if FUN always returns a scalar, tapply returns an array
# with the mode of the scalar.
stepsXday <- tapply(activityData$steps, activityData$date, sum, na.rm = TRUE)
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day')
Mean <- mean(stepsXday)
Median <- median(stepsXday)
Mean
Median
StepsXfive <- aggregate(steps ~ interval, activityData, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
#StepsXfive
#class(StepsXfive)
library(plyr)
library(Hmisc)
ddply(StepsXfive, ~interval, function(x){x[which.max(x$steps), ]})
MaxNrofSteps <- which.max(StepsXfive$steps)
TimeMaxSteps <- StepsXfive$interval[MaxNrofSteps]
#TimeMaxSteps
NA_tot <- length(which(is.na(activityData[,]) == TRUE))
NA_tot
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
str(activityData_fill)
#str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
str(activityDataImputed)
head(activityData_fill)
head(StepsXfive$steps)
stepsXday_fill <- tapply(activityData_fill$steps, activityData_fill$date, sum, na.rm = TRUE)
qplot(stepsXday_fill, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day', binwidth = 500)
Mean_fill <- mean(stepsXday)
Median_fill <- median(stepsXday)
Mean_fill
Median_fill
stepsXday <- tapply(activityData$steps, activityData$date, sum, na.rm = TRUE)
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day')
qplot(stepsXday, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day', binwidth = 500)
Mean <- mean(stepsXday)
Median <- median(stepsXday)
Mean
Median
StepsXfive <- aggregate(steps ~ interval, activityData, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
#StepsXfive
#class(StepsXfive)
library(plyr)
library(Hmisc)
ddply(StepsXfive, ~interval, function(x){x[which.max(x$steps), ]})
MaxNrofSteps <- which.max(StepsXfive$steps)
TimeMaxSteps <- StepsXfive$interval[MaxNrofSteps]
#TimeMaxSteps
NA_tot <- length(which(is.na(activityData[,]) == TRUE))
NA_tot
activityData_fill <- activityData
activityData_fill[is.na(activityData_fill)] <- StepsXfive$steps
str(activityData_fill)
#str(activityData)
activityDataImputed <- activityData
activityDataImputed$steps <- impute(activityData$steps, fun=mean)
str(activityDataImputed)
head(activityData_fill)
head(StepsXfive$steps)
stepsXday_fill <- tapply(activityData_fill$steps, activityData_fill$date, sum, na.rm = TRUE)
qplot(stepsXday_fill, geom = 'histogram', xlab = 'Day', ylab = 'Total number of steps per day', binwidth = 500)
Mean_fill <- mean(stepsXday)
Median_fill <- median(stepsXday)
Mean_fill
Median_fill
activityData_fill$dateType <- as.Date(activityData_fill$date)
str(activityData_fill)
activityData_fill$dateType <- as.Date(activityData_fill$date)
str(activityData_fill)
weekdays1 <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday')
activityData_fill$wDay <- c('weekend', 'weekday')[(weekdays(activityData_fill$dateType) %in% weekdays1)+1L]
str(activityData_fill)
head(activityData_fill)
activityData_fill$wDay
isWeekday(activityData_fill$wDay, wDay = 1:5)
library(timeDate)
StepsXfive_fill <- aggregate(steps ~ interval + wDat, activityData_fill, mean, na.rm = TRUE)
StepsXfive_fill <- aggregate(steps ~ interval + wDay, activityData_fill, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive_fill, aes(x = StepsXfive$interval, y = StepsXfive$steps))
g <- g + geom_line()
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
StepsXfive_fill <- aggregate(steps ~ interval + wDay, activityData_fill, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive_fill, aes(x = StepsXfive_fill$interval, y = StepsXfive_fill$steps))
g <- g + geom_line()
g <- g + facet_grid(. ~ wDay)
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
StepsXfive_fill <- aggregate(steps ~ interval + wDay, activityData_fill, mean, na.rm = TRUE)
g <- ggplot(data = StepsXfive_fill, aes(x = StepsXfive_fill$interval, y = StepsXfive_fill$steps))
g <- g + geom_line()
g <- g + facet_grid(wDay ~.) # to put the plots vertically each other
g <- g + xlab("Five minutes interval")
g <- g + ylab('Total number of steps averaged across all days')
print(g)
title: "PA!_template.Rmd"
output: html_document
---
This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.
When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:
```{r}
summary(cars)
```
You can also embed plots, for example:
```{r, echo=FALSE}
plot(cars)
```
Note that the `echo = FALSE` parameter was added to the code chunk to prevent printing of the R code that generated the plot.
Reproducible Research: Assignment 1
---
title: "Vignette Title"
author: "Vignette Author"
date: "`r Sys.Date()`"
output: rmarkdown::html_vignette
vignette: >
%\VignetteIndexEntry{Vignette Title}
%\VignetteEngine{knitr::rmarkdown}
%\VignetteEncoding{UTF-8}
---
Vignettes are long form documentation commonly included in packages. Because they are part of the distribution of the package, they need to be as compact as possible. The `html_vignette` output type provides a custom style sheet (and tweaks some options) to ensure that the resulting html is as small as possible. The `html_vignette` format:
- Never uses retina figures
- Has a smaller default figure size
- Uses a custom CSS stylesheet instead of the default Twitter Bootstrap style
## Vignette Info
Note the various macros within the `vignette` section of the metadata block above. These are required in order to instruct R how to build the vignette. Note that you should change the `title` field and the `\VignetteIndexEntry` to match the title of your vignette.
## Styles
The `html_vignette` template includes a basic CSS theme. To override this theme you can specify your own CSS in the document metadata as follows:
output:
rmarkdown::html_vignette:
css: mystyles.css
## Figures
The figure sizes have been customised so that you can easily put two images side-by-side.
```{r, fig.show='hold'}
plot(1:10)
plot(10:1)
```
You can enable figure captions by `fig_caption: yes` in YAML:
output:
rmarkdown::html_vignette:
fig_caption: yes
Then you can use the chunk option `fig.cap = "Your figure caption."` in **knitr**.
## More Examples
You can write math expressions, e.g. $Y = X\beta + \epsilon$, footnotes^[A footnote here.], and tables, e.g. using `knitr::kable()`.
```{r, echo=FALSE, results='asis'}
knitr::kable(head(mtcars, 10))
```
Also a quote using `>`:
> "He who gives up [code] safety for [code] speed deserves neither."
([via](https://twitter.com/hadleywickham/status/504368538874703872))
install.packages('rmarkdown')
title: 'Reproducible Research: Assignment 1'
# Reproducible Research: Assignement 1
## Author: Giuseppe Di Bernardo
# Reproducible Research: Peer Assessment 1
## Author: Giuseppe Di Bernardo
## Loading and preprocessing the data
'''{r, echo = TRUE}
library(ggplot2)
library(plyr)
library(Hmisc)
'''
# Reproducible Research: Peer Assessment 1
## Author: Giuseppe Di Bernardo
## Loading and preprocessing the data
'''{r, echo = TRUE}
library(ggplot2)
library(plyr)
'''
# Reproducible Research: Peer Assessment 1
## Author: Giuseppe Di Bernardo
## Loading and preprocessing the data
```{r, echo=TRUE}
library(ggplot2)
library(plyr)
```
#### 2. Make a panel plot containing a time series plot
```{r, echo=TRUE}
